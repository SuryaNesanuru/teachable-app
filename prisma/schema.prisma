// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================
// Enums
// =====================

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum LessonType {
  VIDEO
  PDF
  ARTICLE
  QUIZ
}

// =====================
// Auth (NextAuth compatible)
// =====================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?

  role          UserRole  @default(STUDENT)

  // Profile
  bio           String?   @db.Text
  headline      String?
  website       String?
  github        String?
  twitter       String?
  linkedin      String?

  accounts      Account[]
  sessions      Session[]

  // Marketplace relations
  coursesAuthored Course[] @relation("CourseInstructor")
  purchases       Purchase[]
  subscriptions   Subscription[]
  reviews         Review[]
  progresses      Progress[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// =====================
// Marketplace models
// =====================

model Category {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[]
}

model Course {
  id            String     @id @default(cuid())
  title         String
  slug          String     @unique
  subtitle      String?
  description   String     @db.Text
  level         String?
  language      String?    @default("en")
  thumbnailUrl  String?
  promoVideoUrl String?
  priceCents    Int        @default(0)
  isPublished   Boolean    @default(false)
  freePreviewPct Int       @default(20) // 15-20% default free preview

  categoryId   String?
  category     Category?  @relation(fields: [categoryId], references: [id])

  instructorId String
  instructor   User       @relation("CourseInstructor", fields: [instructorId], references: [id])

  modules      Module[]
  purchases    Purchase[]
  reviews      Review[]

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Module {
  id        String  @id @default(cuid())
  title     String
  order     Int

  courseId  String
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons   Lesson[]
}

model Lesson {
  id            String     @id @default(cuid())
  title         String
  order         Int
  type          LessonType @default(VIDEO)
  videoUrl      String?
  pdfUrl        String?
  pdfPassword   String?
  durationSec   Int?       // for videos
  isFreePreview Boolean     @default(false)

  moduleId String
  module   Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  assets   Asset[]
  progresses Progress[]
}

model Asset {
  id        String  @id @default(cuid())
  title     String
  url       String
  kind      String   // code, resource, attachment
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Purchase {
  id            String   @id @default(cuid())
  userId        String
  courseId      String
  amountCents   Int
  currency      String   @default("usd")
  provider      String   // stripe | paypal | razorpay
  providerId    String   // charge/payment id
  invoiceUrl    String?
  isSubscription Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([courseId])
  @@unique([userId, courseId]) // one-time purchase per course
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String
  provider         String   // stripe | paypal | razorpay
  providerSubId    String   @unique
  status           String   // active, past_due, canceled
  currentPeriodEnd DateTime

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@unique([userId, courseId])
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  secondsWatched Int @default(0)
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lessonId])
  @@unique([userId, lessonId])
}
